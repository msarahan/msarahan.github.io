---
layout: post
status: publish
published: true
title: CMake and HDF5 revisited
author:
  display_name: mikez0r
  login: mikez0r
  email: msarahan@gmail.com
  url: http://
author_login: mikez0r
author_email: msarahan@gmail.com
author_url: http://
wordpress_id: 211
wordpress_url: http://t3hmikez0r.com/?p=211
date: '2014-07-11 10:38:44 -0700'
date_gmt: '2014-07-11 18:38:44 -0700'
categories:
- Uncategorized
tags: []
comments: []
---
<p>Thanks to JC of Kitware at SciPy 2014, the situation with CMake and HDF5 on windows has greatly improved.</p>
<p>First, there's been a new release of HDF5 (1.8.13). Â This release removes a buggy CMake library finder (targets) file. Â The improperly generated file in HDF5 1.8.12 was theÂ hdf5-targets-release.cmake file. Â Go get the new release now: Â <a title="http://www.hdfgroup.org/HDF5/release/obtain5.html" href="http://www.hdfgroup.org/HDF5/release/obtain5.html" target="_blank">http://www.hdfgroup.org/HDF5/release/obtain5.html</a></p>
<p>Secondly, there is a bug in CMake's builtin script for finding HDF5. Â On Windows, it finds a DLL before the Lib file, and won't link properly (<a title="http://public.kitware.com/Bug/view.php?id=14111" href="http://public.kitware.com/Bug/view.php?id=14111" target="_blank">http://public.kitware.com/Bug/view.php?id=14111</a>). Â Thanks to JC, I understand that the way forward is not to patch that file, but ratherÂ to move towards removing CMake's builtin scripts entirely, and push the responsibility of finding these libraries out to the library authors. Â Several library authors have already done this (including HDF5, thankfully). Â The included FindSomething.cmake scripts should be treated as a legacy, fallback approach. Â CMake has a great option for forcing the use of the library's scripts for defining libraries and headers. Â When calling the find_package function, you need to specify the NO_MODULE argument, like so:</p>
<p>FIND_PACKAGE(HDF5 "1.8.5" REQUIRED NO_MODULE)</p>
<p>This bypasses much of CMake's internal FindHDF5 script, and instead goes looking for hdf5-config.cmake in several locations, ideally finding it in the place we installed the HDF5 libraries. Â The new version of the HDF5 libraries now properly tells CMake where to find everything, and life is peachy.</p>
<p>&nbsp;</p>
<p>In summary, use NO_MODULE when the library you're using provides a -config.cmake file. Â It will likely be better (more current) than CMake's internal Findsomething.cmake file. Â However, be careful! Â If not all platforms actually provide this file, then your build will break where this file does not exist. Â Notably, Ubuntu does not (currently) ship the hdf5-config.cmake files with the libhdf5-dev package. Â So, you'll need a code section like this (based onÂ <a title="https://github.com/commontk/CTK/blob/master/Utilities/CMake/FindDCMTK.cmake" href="https://github.com/commontk/CTK/blob/master/Utilities/CMake/FindDCMTK.cmake" target="_blank">https://github.com/commontk/CTK/blob/master/Utilities/CMake/FindDCMTK.cmake</a>):</p>
<pre class="line"># back up any user-defined HDF5_DIR setting
set(_SAVED_HDF5_DIR ${HDF5_DIR})
FIND_PACKAGE(HDF5 "1.8.5" NO_MODULE) # First look for hdf5-config.cmake in defined locations. This file is generated by HDF5 team and is likely more up to date than FindHDF5.cmake included in CMake.
IF(NOT HDF5_FOUND)
 # didn't find hdf5-config.cmake. Need to fall back on CMake's built-in FindHDF5.cmake logic.
 # required says we fail if it isn't found.
 # Restore the value reset by the previous call to 'find_package(HDF5 "1.8.5" NO_MODULE)'
 set(HDF5_DIR ${_SAVED_HDF5_DIR} CACHE PATH "HDF5 install dir" FORCE)
 FIND_PACKAGE(HDF5 "1.8.5" REQUIRED)
ENDIF()</pre>
<p>&nbsp;</p>
<p>More information:<br />
details on find_package: <a title="http://www.cmake.org/cmake/help/v3.0/command/find_package.html?highlight=find_package" href="http://www.cmake.org/cmake/help/v3.0/command/find_package.html?highlight=find_package" target="_blank">http://www.cmake.org/cmake/help/v3.0/command/find_package.html?highlight=find_package</a><br />
Creating your own package descriptions to make includes and libraries easy for downstream users:</p>
<p><a title="http://www.cmake.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file" href="http://www.cmake.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file" target="_blank">http://www.cmake.org/Wiki/CMake/Tutorials/How_to_create_a_ProjectConfig.cmake_file</a><br />
and<br />
<a title="http://www.cmake.org/cmake/help/git-master/manual/cmake-packages.7.html#creating-packages" href="http://www.cmake.org/cmake/help/git-master/manual/cmake-packages.7.html#creating-packages" target="_blank">http://www.cmake.org/cmake/help/git-master/manual/cmake-packages.7.html#creating-packages</a></p>
<p>Thanks again to JC for helping me figure this stuff out - now I need to get QSTEM using it!</p>
